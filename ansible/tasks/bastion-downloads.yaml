---

- name: Install needed packages
  ansible.builtin.package:
    name:
      - openssl
      - httpd-tools
      - podman
      - skopeo
    state: present

- name: Copy SSH key to bastion
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /root/.ssh/
    owner: root
    group: root
    mode: '0400'
  with_items:
    - ../ssh/id_rsa
    - ../ssh/id_rsa.pub

- name: Copy pull-secret to bastion
  ansible.builtin.copy:
    src: "{{ pull_secret }}"
    dest: /root/
    owner: root
    group: root
    mode: '0640'

# Checking for live_kernel only.
- name: Test existence of pxe boot files
  ansible.builtin.stat:
    path: /var/www/html/rhcos-live-kernel-x86_64
  register: live_kernel

#- debug:
#    var: live_kernel

- name: Download pxe boot file with checksum url (sha256)
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: /var/www/html
    force: no
    owner: apache
    group: apache
    mode: '0664'
    checksum: sha256:{{ openshift_mirror_base }}/sha256sum.txt
  with_items:
    - "{{ openshift_mirror_base }}/rhcos-live-kernel-x86_64"
    - "{{ openshift_mirror_base }}/rhcos-live-initramfs.x86_64.img"
    - "{{ openshift_mirror_base }}/rhcos-live-rootfs.x86_64.img"
  when: not live_kernel.stat.exists


# Install tooling.
# https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ cluster_version }}/

- name: Create a directory if it does not exist
  ansible.builtin.file:
    path: /root/bin
    state: directory
    owner: root
    group: root
    mode: '0755'

# Checking for openshift-install only.
- name: Test existence of client tools tar.gz files
  ansible.builtin.stat:
    path: /root/bin/openshift-install-linux-{{ cluster_version }}.tar.gz
  register: cli_install

- name: Download client tools with checksum url (sha256)
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: /root/bin
    force: no
    checksum: sha256:https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ cluster_version }}/sha256sum.txt
  with_items:
    - "https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ cluster_version }}/openshift-client-linux-{{ cluster_version }}.tar.gz"
    - "https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ cluster_version }}/openshift-install-linux-{{ cluster_version }}.tar.gz"
    - "https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ cluster_version }}/opm-linux-{{ cluster_version }}.tar.gz"
    - - "https://mirror.openshift.com/pub/openshift-v4/{{ arch }}/clients/ocp/{{ cluster_version }}/release.txt"
  when: not cli_install.stat.exists

# Checking for openshift-install only.
- name: Test existence of client tools binaries
  ansible.builtin.stat:
    path: /root/bin/openshift-install
  register: cli_install_bin

- name: Unarchive client tools
  ansible.builtin.unarchive:
    src: "{{ item }}"
    dest: /root/bin
    remote_src: yes
  with_items:
    - /root/bin/openshift-install-linux-{{ cluster_version }}.tar.gz
    - /root/bin/openshift-client-linux-{{ cluster_version }}.tar.gz
    - /root/bin/opm-linux-{{ cluster_version }}.tar.gz
  when: not cli_install_bin.stat.exists

- name: Add oc completion commands in .bash_profile
  ansible.builtin.lineinfile:
    path: /root/.bash_profile
    regexp: '^source <(oc completion bash)'
    line: 'source <(oc completion bash)'

- name: Add openshift-install completion commands in .bash_profile
  ansible.builtin.lineinfile:
    path: /root/.bash_profile
    regexp: '^source <(openshift-install completion bash)'
    line: 'source <(openshift-install completion bash)'

- name: Add KUBECONFIG to .bash_profile
  ansible.builtin.lineinfile:
    path: /root/.bash_profile
    regexp: '^export KUBECONFIG=/root/{{ cluster_name }}/auth/kubeconfig'
    line: 'export KUBECONFIG=/root/{{ cluster_name }}/auth/kubeconfig'


# Create CA
# https://gist.github.com/fntlnz/cf14feb5a46b2eda428e000157447309
# https://janikvonrotz.ch/2019/01/21/create-a-certificate-authority-ca-and-sign-server-certificates-without-prompting-using-openssl/


- name: Checking the existence of the CA cert
  ansible.builtin.stat:
    path: /root/CA/CA_cert.pem
  register: CA

- block:

  - name: Create a directory for the CA
    ansible.builtin.file:
      path: /root/CA
      state: directory
      owner: root
      group: root
      mode: '0755'

  # A more key uses 4096 bits.
  - name: Create the CA key
    ansible.builtin.shell:
      cmd: openssl genrsa -out ./CA_key.pem 2048
      chdir: /root/CA

  # Adjust cert parameters to your liking.
  - name: Create the CA cert
    ansible.builtin.shell:
      cmd: openssl req -x509 -new -nodes -key ./CA_key.pem -sha256 -days 3650 -out ./CA_cert.pem -subj "/C=UK/ST=London/L=London/O=Red Hat CEE/CN=ShiftCA"
      chdir: /root/CA

  - name: Installing the CA in Bastion system 
    ansible.builtin.copy:
      src: /root/CA/CA_cert.pem
      dest: /etc/pki/ca-trust/source/anchors/
      remote_src: yes

  - name: Running update-ca-trust
    ansible.builtin.shell: update-ca-trust extract

  when: not CA.stat.exists


# Configure registry
# https://access.redhat.com/articles/5489341
# https://docs.openshift.com/container-platform/4.9/installing/installing-mirroring-installation-images.html

- name: Create registry directories
  ansible.builtin.file:
    path: "/opt/registry/{{ item }}"
    state: directory
    owner: root
    group: root
    mode: '0755'
  with_items:
    - auth
    - certs
    - data
    - conf


# If available, sync local mirror data before starting registry


# Create bastion cert
- name: Checking the existence of the bastion cert
  ansible.builtin.stat:
    path: /opt/registry/certs/bastion.{{ cluster_name }}.{{ cluster_domain }}.pem
  register: cert

- block:

  - name: Generating bastion cert key
    ansible.builtin.shell:
      cmd: openssl genrsa -out /opt/registry/certs/bastion.{{ cluster_name }}.{{ cluster_domain }}.key 2048

  - name: Generating bastion cert request
    ansible.builtin.shell:
      cmd: openssl req -new -key /opt/registry/certs/bastion.{{ cluster_name }}.{{ cluster_domain }}.key -out /opt/registry/certs/bastion.{{ cluster_name }}.{{ cluster_domain }}.csr -subj "/CN=bastion.{{ cluster_name }}.{{ cluster_domain }}"

  - name: Creating OpenSSL X509v3 extensions file for bastion
    ansible.builtin.template:
      src: files/openssl-X509v3-extensions.j2
      dest: /opt/registry/certs/bastion.{{ cluster_name }}.{{ cluster_domain }}.cnf
      owner: root
      group: root
      mode: '0644'
      backup: no

  - name: Signing bastion certificate
    ansible.builtin.shell:
      cmd: openssl x509 -req -in /opt/registry/certs/bastion.{{ cluster_name }}.{{ cluster_domain }}.csr -CA /root/CA/CA_cert.pem -CAkey /root/CA/CA_key.pem -CAcreateserial -out /opt/registry/certs/bastion.{{ cluster_name }}.{{ cluster_domain }}.pem -days 825 -sha256 -extfile /opt/registry/certs/bastion.{{ cluster_name }}.{{ cluster_domain }}.cnf

  when: not cert.stat.exists


- name: Checking the existence of the registry auth
  ansible.builtin.stat:
    path: /opt/registry/auth/htpasswd
  register: auth

# Auth. Username: admin, Password: redhat
- name: Creating registry authentication file
  ansible.builtin.shell:
    cmd: htpasswd -bBc /opt/registry/auth/htpasswd admin redhat ; echo redhat > /opt/registry/auth/admin-password.txt
  when: not auth.stat.exists

- name: Creating registry configuration file
  ansible.builtin.template:
    src: files/registry/registry-config.yml.j2
    dest: /opt/registry/conf/config.yml
    owner: root
    group: root
    mode: '0644'
    backup: no

- name: Permit traffic in port 5000/tcp
  ansible.posix.firewalld:
    port: "5000/tcp"
    permanent: yes
    immediate: yes
    state: enabled

- name: Creating registry Systemd configuration file
  ansible.builtin.template:
    src: files/registry/podman-registry.service.j2
    dest: /etc/systemd/system/podman-registry.service
    owner: root
    group: root
    mode: '0644'
    backup: no

- name: restart and enable podman-registry.service
  ansible.builtin.systemd:
    name: podman-registry.service
    state: started
    enabled: yes
    daemon_reload: yes

- name: Wait for port 5000 to become open on the host
  ansible.builtin.wait_for:
    port: 5000
    delay: 5

- name: Test registry
  ansible.builtin.uri:
    url: https://bastion.{{ cluster_name }}.{{ cluster_domain }}:5000/v2/_catalog
    url_username: admin
    url_password: redhat
    return_content: yes
  register: registry

- name: status=200 and json payload of "{"repositories":[]}" is good!
  debug:
    var: registry

# Create a pull-secret for the registry:
# https://docs.openshift.com/container-platform/4.9/installing/installing-mirroring-installation-images.html#installation-adding-registry-pull-secret_installing-mirroring-installation-images

- name: Create a directory for the registry files
  ansible.builtin.file:
    path: /root/registry
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Create script to create the registry pull secret
  ansible.builtin.template:
    src: files/registry/create-registry-pull-secret.sh.j2
    dest: /root/registry/create-registry-pull-secret.sh
    owner: root
    group: root
    mode: '0755'
    backup: no

- name: Run script to create the registry pull secret
  ansible.builtin.command:
    cmd: /root/registry/create-registry-pull-secret.sh
  args:
    creates: /root/registry/pull-secret.json

- name: Create the mirror registry script
  ansible.builtin.template:
    src: files/registry/mirror-registry.sh.j2
    dest: /root/registry/mirror-registry.sh
    owner: root
    group: root
    mode: '0755'
    backup: no

- name: Execute the mirror registry script. GO TAKE A COFFEE!!!
  ansible.builtin.shell:
    cmd: PATH=$PATH:/root/bin /root/registry/mirror-registry.sh
  args:
    executable: /bin/bash


# openshift-install
- name: Get the pull secret in a a variable - version with registry credentials
  ansible.builtin.shell:
    cmd: cat registry/pull-secret.json | jq -c .
  register: pull_secret

- debug:
    var: pull_secret
  tags:
    - debug

- name: Get the SSH public key in a a variable
  ansible.builtin.command:
    cmd: cat /root/.ssh/id_rsa.pub
  register: ssh_public_key

- debug:
    var: ssh_public_key
  tags:
    - debug

- name: Get the CA cert in a a variable
  ansible.builtin.command:
    cmd: awk '{$1="  "$1}1' /root/CA/CA_cert.pem
  register: ca_cert

- debug:
    var: ca_cert
  tags:
    - debug

- name: Assemble the install-config.yaml
  ansible.builtin.template:
    src: files/ocp-install/install-config.yaml.j2
    dest: /root/install-config.yaml
    owner: root
    group: root
    mode: '0644'
    backup: no

# Ignition files

# Checking for existing run. Remove folder to repeat.
- name: Test existence of existing files
  ansible.builtin.stat:
    path: /root/{{ cluster_name }}/auth
  register: ignition_files

- debug:
    var: ignition_files

- block:

  - name: Create folder for cluster
    ansible.builtin.file:
      path: /root/{{ cluster_name }}
      state: directory
      owner: root
      group: root
      mode: '0755'

  - name: Copying install-config.yaml to cluster folder
    ansible.builtin.copy:
      src: /root/install-config.yaml
      dest: /root/{{ cluster_name }}/install-config.yaml
      remote_src: yes

  - name: Create manifest files
    ansible.builtin.shell:
      cmd: PATH=$PATH:/root/bin openshift-install --dir {{ cluster_name}} create manifests
    args:
      chdir: /root/

  - name: Create ignition files
    ansible.builtin.shell:
      cmd: PATH=$PATH:/root/bin openshift-install --dir {{ cluster_name }} create ignition-configs
    args:
      chdir: /root/

  - name: Copy ignition files to http server
    ansible.builtin.copy:
      src: "{{ item }}"
      dest: /var/www/html
      owner: apache
      group: apache
      mode: '0664'
      remote_src: yes
    with_items:
      - /root/{{ cluster_name }}/bootstrap.ign
      - /root/{{ cluster_name }}/master.ign
      - /root/{{ cluster_name }}/worker.ign

  when: not ignition_files.stat.exists
