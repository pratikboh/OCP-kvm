---

- name: Update Server
  yum:
    name: '*'
    state: latest
    update_cache: yes
  register: updated

# If updated, reboot server and wait for SSH readiness.
- block:
    - name: Reboot Server
      command: shutdown +1 -r

    - name: Wait for reboot cycle
      wait_for:
        delay: 70
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
      delegate_to: localhost
  when: updated.changed == true


- name: Install needed packages
  ansible.builtin.package:
    name:
      - bash-completion
      - vim
      - haproxy
      - ca-certificates
      - skopeo
      - wget
      - bind
      - bind-utils
      - dhcp-server
      - tftp-server
      - syslinux
      - httpd
      - chrony
    state: present


# We only want the bastion nameserver as active.
# Disable the nameserver provided by the "default" network.
### TODO: Ideally access server facts and get the connection name.

- block:
  - name: Disable the nameserver provided by the "default" network
    ansible.builtin.shell: nmcli connection modify enp1s0 ipv4.ignore-auto-dns yes

  - name: restart NetworkManager
    ansible.builtin.systemd:
      name: NetworkManager.service
      state: restarted
  when: ansible_dns.nameservers|length > 1


# named: ips and names.
# /etc/named.conf

- name: Configure /etc/named.conf
  ansible.builtin.template:
    src: files/named/named.conf.j2
    dest: /etc/named.conf
    owner: root
    group: named
    mode: '0740'
    backup: no
    validate: /usr/sbin/named-checkconf %s

- name: Configure /var/named/dynamic/{{ cluster_domain }}.db
  ansible.builtin.template:
    src: files/named/zone.db.j2
    dest: /var/named/dynamic/{{ cluster_domain }}.db
    owner: root
    group: named
    mode: '0740'
    backup: no
    validate: /usr/sbin/named-checkzone "{{ cluster_domain }}" %s

- name: Configure /var/named/dynamic/{{ network_reverse }}.in-addr.arpa.db
  ansible.builtin.template:
    src: files/named/reverse.db.j2
    dest: /var/named/dynamic/{{ network_reverse }}.in-addr.arpa.db
    owner: root
    group: named
    mode: '0740'
    backup: no
    validate: /usr/sbin/named-checkzone "{{ network_reverse }}.in-addr.arpa" %s

- name: restart and enable named.service
  ansible.builtin.systemd:
    name: named.service
    state: started
    enabled: yes


# dhcpd: ips, names and mac addresses.
# /etc/dhcp/dhcpd.conf

- name: Configure /etc/dhcp/dhcpd.conf
  ansible.builtin.template:
    src: files/dhcpd.conf.j2
    dest: /etc/dhcp/dhcpd.conf
    owner: root
    group: root
    mode: '0640'
    backup: no

- name: restart and enable dhcpd.service
  ansible.builtin.systemd:
    name: dhcpd.service
    state: started
    enabled: yes


# tftp: role per mac and default.
# /var/lib/tftpboot/pxelinux.cfg/default

- name: Make Network Boot Programs for BIOS based systems available
  ansible.builtin.copy:
    src: "{{ item }}"
    dest: /var/lib/tftpboot/
    remote_src: yes
  with_items:
    - /usr/share/syslinux/memdisk
    - /usr/share/syslinux/menu.c32
    - /usr/share/syslinux/pxelinux.0
    - /usr/share/syslinux/ldlinux.c32
    - /usr/share/syslinux/libutil.c32

- name: Create directory for PXE server configuration
  file:
    path: /var/lib/tftpboot/pxelinux.cfg
    state: directory

- name: Configure TFTP pxelinux.cfg/default
  ansible.builtin.template:
    src: files/tftp/default.j2
    dest: /var/lib/tftpboot/pxelinux.cfg/default
    owner: root
    group: root
    mode: '0644'
    backup: no

- name: Configure TFTP pxelinux.cfg/bootstrap
  ansible.builtin.template:
    src: files/tftp/bootstrap.j2
    dest: /var/lib/tftpboot/pxelinux.cfg/bootstrap
    owner: root
    group: root
    mode: '0644'
    backup: no

- name: Create a symbolic link for bootstrap mac address
  ansible.builtin.file:
    src: bootstrap
    dest: /var/lib/tftpboot/pxelinux.cfg/01-{{ mac_bootstrap | replace(':','-') }}
    owner: root
    group: root
    mode: '0644'
    state: link

- name: Configure TFTP pxelinux.cfg/masters
  ansible.builtin.template:
    src: files/tftp/master.j2
    dest: /var/lib/tftpboot/pxelinux.cfg/master
    owner: root
    group: root
    mode: '0644'
    backup: no

- name: Create a symbolic link for masters mac address
  ansible.builtin.file:
    src: master
    dest: /var/lib/tftpboot/pxelinux.cfg/01-{{ item | replace(':','-') }}
    owner: root
    group: root
    mode: '0644'
    state: link
  with_items:
    - "{{ mac_master1 }}"
    - "{{ mac_master2 }}"
    - "{{ mac_master3 }}"

- name: Configure TFTP pxelinux.cfg/workers
  ansible.builtin.template:
    src: files/tftp/worker.j2
    dest: /var/lib/tftpboot/pxelinux.cfg/worker
    owner: root
    group: root
    mode: '0644'
    backup: no

- name: Create a symbolic link for workers mac address
  ansible.builtin.file:
    src: worker
    dest: /var/lib/tftpboot/pxelinux.cfg/01-{{ item | replace(':','-') }}
    owner: root
    group: root
    mode: '0644'
    state: link
  with_items:
    - "{{ mac_worker1 }}"
    - "{{ mac_worker2 }}"
    - "{{ mac_worker3 }}"

- name: restart and enable tftp.service
  ansible.builtin.systemd:
    name: tftp.service
    state: started
    enabled: yes


# httpd: port 81, ignition and pxe files.
# ignition files postponed for later.

- name: Reconfigure httpd service
  ansible.builtin.replace:
    path: /etc/httpd/conf/httpd.conf
    regexp: '^(Listen)\s+80\s*$'
    replace: '\1 81'

- name: restart and enable httpd.service
  ansible.builtin.systemd:
    name: httpd.service
    state: started
    enabled: yes


# haproxy ports 80, 443: names.
# /etc/haproxy/haproxy.cfg

- name: Configure HAProxy
  ansible.builtin.template:
    src: files/haproxy.cfg.j2
    dest: /etc/haproxy/haproxy.cfg
    owner: root
    group: root
    mode: '0644'
    backup: no

# semanage port -a -t http_port_t -p tcp 6443
- name: Allow haproxy to listen on tcp port 6443
  community.general.seport:
    ports: "{{ item }}"
    proto: tcp
    setype: http_port_t
    state: present
  with_items:
    - 1936
    - 6443
    - 22623

- name: restart and enable haproxy.service
  ansible.builtin.systemd:
    name: haproxy.service
    state: started
    enabled: yes


# ntp server!!!
# https://www.golinuxcloud.com/configure-chrony-ntp-server-client-force-sync/

- name: Configure NTP as Server
  ansible.builtin.template:
    src: files/chrony.conf.j2
    dest: /etc/chrony.conf
    owner: root
    group: root
    mode: '0644'
    backup: no

- name: restart and enable chronyd.service
  ansible.builtin.systemd:
    name: chronyd.service
    state: started
    enabled: yes


# nfs?
# iscsi?


- name: Configure Firewalld
  firewalld:
    service: "{{ item }}"
    state: enabled
    permanent: true
    immediate: true
  with_items:
    - dns
    - dhcp
    - tftp
    - http
    - https
    - ntp

- name: Permit traffic in port 81/tcp
  ansible.posix.firewalld:
    port: "{{ item }}"
    permanent: yes
    immediate: yes
    state: enabled
  with_items:
    - "81/tcp"
    - "6443/tcp"
    - "22623/tcp"
